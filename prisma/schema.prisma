generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
//  output = "../src/generated/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Movie {
  id                String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid @map("movi_id")
  createdAt         DateTime              @default(now()) @db.Timestamp(6) @map("movi_created_at")

  jellyfinTitle     String?               @map("movi_jellyfin_title")
  radarrTitle       String?               @map("movi_radarr_title")
  ombiRequestTitle  String?               @map("movi_ombi_request_title")

  jellyfinId        String?               @unique() @map("movi_jellyfin_id")
  radarrId          String?               @unique() @map("movi_radarr_id")
  ombiRequestId     String?               @unique() @map("movi_ombi_request_id")
  tmdbId            String?               @unique() @map("movi_tmdb_id")
  imdbId            String?               @unique() @map("movi_imdb_id")

  jellyfinState     JellyfinDataState?    @map("movi_jellyfin_state")
  radarrState       RadarrDataState?      @map("movi_radarr_state")
  ombiRequestState  OmbiRequestDataState? @map("movi_ombi_request_state")

  videoTracks       MovieVideoTrack[]
  audioTracks       MovieAudioTrack[]
  subtitleTracks    MovieSubtitleTrack[]
}

model MovieAudioTrack {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid @map("moat_id")
  createdAt   DateTime  @default(now()) @db.Timestamp(6) @map("moat_created_at")

  title       String    @map("moat_title")
  codec       String    @map("moat_codec")
  language    String    @map("moat_language")
  channels    String    @map("moat_channels")
  bitrate     String    @map("moat_bitrate")
  sampleRate  String    @map("moat_sample_rate")

  movieId     String    @db.Uuid @map("movi_id")
  movie       Movie     @relation(fields: [movieId], references: [id], onDelete: Cascade)
}

model MovieVideoTrack {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid @map("movt_id")
  createdAt     DateTime  @default(now()) @db.Timestamp(6) @map("movt_created_at")

  title         String    @map("movt_title")
  aspectRatio   String    @map("movt_aspect_ratio")
  codec         String    @map("movt_codec")
  colorSpace    String    @map("movt_color_space")
  interlaced    Boolean   @map("movt_interlaced")
  height        String    @map("movt_height")
  width         String    @map("movt_width")
  range         String    @map("movt_range")

  movieId       String    @db.Uuid @map("movi_id")
  movie         Movie     @relation(fields: [movieId], references: [id], onDelete: Cascade)
}

model MovieSubtitleTrack {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid @map("most_id")
  createdAt   DateTime  @default(now()) @db.Timestamp(6) @map("most_created_at")

  title       String    @map("most_title")
  codec       String    @map("most_codec")
  language    String    @map("most_language")
  external    Boolean   @map("most_external")
  forced      Boolean   @map("most_forced")

  movieId     String    @db.Uuid @map("movi_id")
  movie       Movie     @relation(fields: [movieId], references: [id], onDelete: Cascade)
}

model Show {
  id                    String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid @map("show_id")
  createdAt             DateTime            @default(now()) @db.Timestamp(6) @map("show_created_at")

  jellyfinTitle         String?             @map("show_jellyfin_title")
  ombiRequestTitle      String?             @map("show_ombi_request_title")

  sonarrTitle           String?             @map("show_sonarr_title")
  sonarrPosterImage     String?             @map("show_sonarr_poster_image")
  sonarrBannerImage     String?             @map("show_sonarr_banner_image")
  sonarrFanartImage     String?             @map("show_sonarr_fanart_image")
  sonarrScreenshotImage String?             @map("show_sonarr_screenshot_image")
  sonarrHeadshotImage   String?             @map("show_sonarr_headshot_image")

  jellyfinId            String?             @unique() @map("show_jellyfin_id")
  sonarrId              String?             @unique() @map("show_sonarr_id")
  ombiRequestId         String?             @unique() @map("show_ombi_request_id")
  tvdbId                String?             @unique() @map("show_tvdb_id")
  tvRageId              String?             @unique() @map("show_tvrage_id")
  tvMazeId              String?             @unique() @map("show_tvmaze_id")
  imdbId                String?             @unique() @map("show_imdb_id")

  jellyfinState         JellyfinDataState?  @map("show_jellyfin_state")
  sonarrState           SonarrDataState?    @map("show_sonarr_state")

  seasons               ShowSeason[]
}

model ShowSeason {
  id              String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid @map("shse_id")
  number          Int                 @map("shse_number")
  createdAt       DateTime            @default(now()) @db.Timestamp(6) @map("shse_created_at")

  jellyfinId      String?             @unique() @map("shse_jellyfin_id")

  jellyfinState   JellyfinDataState?  @map("shse_jellyfin_state")
  sonarrState     SonarrDataState?    @map("shse_sonarr_state")

  showId          String              @db.Uuid @map("show_id")
  show            Show                @relation(fields: [showId], references: [id], onDelete: Cascade)
  episodes        ShowEpisode[]

  @@unique([showId, number])
}

model ShowEpisode {
  id                    String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid @map("shep_id")
  number                Int                     @map("shep_number")
  createdAt             DateTime                @default(now()) @db.Timestamp(6) @map("shep_created_at")

  jellyfinTitle         String?                 @map("shep_jellyfin_title")
  sonarrTitle           String?                 @map("shep_sonarr_title")
  ombiRequestTitle      String?                 @map("shep_ombi_request_title")

  jellyfinId            String?                 @unique() @map("shep_jellyfin_id")
  sonarrId              String?                 @unique() @map("shep_sonarr_id")

  jellyfinState         JellyfinDataState?      @map("shep_jellyfin_state")
  sonarrState           SonarrEpisodeDataState? @map("shep_sonarr_state")
  ombiRequestState      OmbiRequestDataState?   @map("shep_ombi_request_state")

  seasonId              String                  @db.Uuid @map("shse_id")
  season                ShowSeason              @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  episodeAudioTrack     EpisodeAudioTrack[]
  episodeSubtitleTrack  EpisodeSubtitleTrack[]
  episodeVideoTrack     EpisodeVideoTrack[]

  @@unique([seasonId, number])
}

model EpisodeAudioTrack {
  id          String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid @map("epat_id")
  createdAt   DateTime      @default(now()) @db.Timestamp(6) @map("epat_created_at")

  title       String        @map("epat_title")
  codec       String        @map("epat_codec")
  language    String        @map("epat_language")
  channels    String        @map("epat_channels")
  bitrate     String        @map("epat_bitrate")
  sampleRate  String        @map("epat_sample_rate")

  episodeId   String        @db.Uuid @map("shep_id")
  episode     ShowEpisode   @relation(fields: [episodeId], references: [id], onDelete: Cascade)
}

model EpisodeVideoTrack {
  id          String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid @map("epvt_id")
  createdAt   DateTime    @default(now()) @db.Timestamp(6) @map("epvt_created_at")

  title       String      @map("epvt_title")
  aspectRatio String      @map("epvt_aspect_ration")
  codec       String      @map("epvt_codec")
  colorSpace  String      @map("epvt_color_space")
  interlaced  Boolean     @map("epvt_interlaced")
  height      String      @map("epvt_height")
  width       String      @map("epvt_width")
  range       String      @map("epvt_range")

  episodeId   String      @db.Uuid @map("shep_id")
  episode     ShowEpisode @relation(fields: [episodeId], references: [id], onDelete: Cascade)
}

model EpisodeSubtitleTrack {
  id          String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid @map("epst_id")
  createdAt   DateTime    @default(now()) @db.Timestamp(6) @map("epst_created_at")

  title       String      @map("epst_title")
  codec       String      @map("epst_codec")
  language    String      @map("epst_language")
  external    Boolean     @map("epst_external")
  forced      Boolean     @map("epst_forced")

  episodeId   String      @db.Uuid @map("shep_id")
  episode     ShowEpisode @relation(fields: [episodeId], references: [id], onDelete: Cascade)
}

enum JellyfinDataState {
  UNAVAILABLE
  AVAILABLE
}

enum RadarrDataState {
  UNMONITORED
  MONITORED
  GRABBED
  AVAILABLE
  REMOVED
}

enum SonarrDataState {
  UNMONITORED
  MONITORED
}

enum SonarrEpisodeDataState {
  UNMONITORED
  MONITORED
  GRABBED
  AVAILABLE
  REMOVED
}

enum OmbiRequestDataState {
  PENDING_APPROVAL
  REQUEST_DENIED
  PROCESSING_REQUEST
  AVAILABLE
}
